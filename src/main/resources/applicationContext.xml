<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
http://www.springframework.org/schema/tx
http://www.springframework.org/schema/tx/spring-tx-4.2.xsd 
http://www.springframework.org/schema/aop 
http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
http://www.springframework.org/schema/context
http://www.springframework.org/schema/context/spring-context-4.2.xsd">


	<!-- <bean id="sessionFactory" class="org.springframework.orm.hibernate3.LocalSessionFactoryBean"> 
		<property name="configLocation" value="classpath:hibernate.cfg.xml"> </property> 
		</bean> -->
	<!-- 配置会话工厂 -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
		<!-- 设置数据源 -->
		<property name="dataSource" ref="dynamicDataSource" />
		<!-- 接管了hibernate对象映射文件 -->
		<!-- <property name="mappingResources"> <list> <value>com/lj/mvn_ssh/pojo/Student.hbm.xml</value> 
			</list> </property> -->
		<!-- 自动扫描注解方式配置的hibernate类文件 -->
		<property name="packagesToScan">
			<list>
				<value>com.lj.mvn_ssh.pojo</value>
			</list>
		</property>

		<!--指定hibernate的属性值 -->
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
				<!-- <prop key="hibernate.hbm2ddl.auto">update</prop> -->
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.format_sql">true</prop>
				<prop key="javax.persistence.validation.mode">none</prop>
				<prop key="hibernate.temp.use_jdbc_metadata_defaults">false</prop>
			</props>
		</property>


	</bean>

	<bean id="basicDao" class="com.lj.mvn_ssh.dao.impl.BasicDaoImpl"
		scope="singleton">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>






	<bean id="testService" class="com.lj.mvn_ssh.service.impl.TestServiceImpl">
		<property name="basicDao" ref="basicDao" />
	</bean>
	<bean name="person" class="com.lj.mvn_ssh.pojo.Student">
		<property name="age" value="23" />
	</bean>
	<!-- 下边这里是配置注解的方式 -->
	<!-- <context:annotation-config /> <context:component-scan base-package="us.xuhang.project.ssh" 
		/> <context:property-placeholder location="classpath:hibernate.properties"/> -->
	<!-- <import resource="classpath:hibernate.cfg.xml" /> -->
	<aop:aspectj-autoproxy />
	<!-- 定义事务管理器 -->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate5.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<!-- 加载事务驱动 -->
	<!-- 对@Transactional这个注解进行的驱动，这是基于注解的方式使用事务配置声明，这样在具体应用中可以指定对哪些方法使用事务 -->
	<!-- <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" 
		/> -->

	<!-- 事务的策略 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="insert*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="select*" propagation="REQUIRED" read-only="true" />
			<tx:method name="*" read-only="true" />
		</tx:attributes>
	</tx:advice>

	<!-- AOP配置 -->
	<!-- <aop:config> 对满足下面表达式的(业务逻辑层)方法实施事务 <aop:pointcut id="txPointcut" expression="execution(* 
		us.xuhang.project.service.*.*(..))" /> 引用上面的事务策略txAdvice <aop:advisor advice-ref="txAdvice" 
		pointcut-ref="txPointcut" /> </aop:config> -->

	<!-- 声明日志记录通知 -->
	<!-- <bean id="logInterceptor" class="us.xuhang.project.interceptor.LogInterceptor"></bean> -->
	<!-- <aop:config> 配置一个切面 <aop:aspect id="point" ref="logInterceptor"> 配置切入点，指定切入点表达式 
		此句也可放到 aop:aspect标签外依然有效 <aop:pointcut expression="execution(public * us.xuhang.project.service..*.*(..))" 
		id="myMethod" /> 应用前置通知 <aop:before method="before" pointcut-ref="myMethod" 
		/> 应用环绕通知需指定向下进行 <aop:around method="around" pointcut-ref="myMethod" /> 应用后通知 
		<aop:after-returning method="afterReturning" pointcut-ref="myMethod" /> 应用抛出异常后通知 
		<aop:after-throwing method="afterThrowing" pointcut-ref="myMethod" /> </aop:aspect> 
		</aop:config> -->

	<!-- 引入多个数据源文件 -->
	<import resource="classpath:applicationContext-dataSources.xml" />
</beans>